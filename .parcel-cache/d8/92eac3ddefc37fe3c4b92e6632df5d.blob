"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _consts = require("../../const/consts");
var _events = require("../../const/events");
var _typeSocketData = require("../../const/typeSocketData");
var _getElementFromStore = _interopRequireDefault(require("../functions/getElementFromStore"));
var _renderMessages = _interopRequireDefault(require("../functions/renderMessages"));
var _scrollMessagesContainer = _interopRequireDefault(require("../functions/scrollMessagesContainer"));
var _storeObj = require("../store/storeObj");
var _EventBus = _interopRequireDefault(require("./Event-Bus"));
var DataWebSocket = /*#__PURE__*/(function () {
  function DataWebSocket(props) {
    var _this = this;
    (0, _classCallCheck2["default"])(this, DataWebSocket);
    this.create = function () {
      _this.dataWebSocket = new WebSocket(_this.props.path);
      _this.count = 0;
      _this.listen();
    };
    this.closeSocket = function () {
      if (_this.dataWebSocket !== null) {
        _this.dataWebSocket.addEventListener("close", function (event) {
          if (!event.wasClean) {
            _this.create();
          }
        });
      }
    };
    this.getAllOldMessages = function () {
      if (_this.dataWebSocket !== null && _this.messages.length === 0) {
        _this.dataWebSocket.send(JSON.stringify({
          content: ("").concat(_this.count),
          type: _typeSocketData.TYPE_SOCKET_DATA.GET_OLD
        }));
      }
    };
    this.openSocket = function () {
      if (_this.dataWebSocket !== null) {
        _this.dataWebSocket.addEventListener("open", _this.getAllOldMessages);
      }
    };
    this.messageSocket = function () {
      if (_this.dataWebSocket !== null) {
        _this.dataWebSocket.addEventListener("message", function (event) {
          var data = JSON.parse(event.data);
          if (_this.flag) {
            if (event instanceof MessageEvent) {
              if (data.length < _consts.PART_OF_MESSAGES) {
                _this.messages = _this.messages.concat(data);
                _this.flag = false;
                _this.count = _this.count + data.length;
              } else {
                _this.messages = _this.messages.concat(data);
                _this.count = _this.count + _consts.PART_OF_MESSAGES;
                if (_this.dataWebSocket !== null) {
                  _this.dataWebSocket.send(JSON.stringify({
                    content: ("").concat(_this.count),
                    type: _typeSocketData.TYPE_SOCKET_DATA.GET_OLD
                  }));
                }
              }
            }
          } else {
            if (data.type === _typeSocketData.TYPE_SOCKET_DATA.TEXT) {
              var chatSelected = (0, _getElementFromStore["default"])(_storeObj.store, "chatsProps", "chatSelected");
              var messagesContainer = chatSelected.element.querySelector(".messages-list__container");
              (0, _renderMessages["default"])([data], messagesContainer);
              _this.messages.unshift(data);
              (0, _scrollMessagesContainer["default"])(messagesContainer);
            }
          }
        });
      }
    };
    this.errorSocket = function () {
      if (_this.dataWebSocket !== null) {
        _this.dataWebSocket.addEventListener("error", function (error) {
          if (error instanceof Error) {
            alert(error.message);
          }
        });
      }
    };
    var eventBus = new _EventBus["default"]();
    this.eventBus = eventBus;
    this.dataWebSocket = null;
    this.props = props;
    this.messages = [];
    this.count = 0;
    this.flag = true;
    this.createResource(eventBus);
  }
  (0, _createClass2["default"])(DataWebSocket, [{
    key: "createResource",
    value: function createResource(eventBus) {
      eventBus.on(_events.EVENTS.OPEN_SOCKET, this.openSocket);
      eventBus.on(_events.EVENTS.MESSAGE_SOKET, this.messageSocket);
      eventBus.on(_events.EVENTS.ERROR_SOCKET, this.errorSocket);
      eventBus.on(_events.EVENTS.CLOSE_SOCKET, this.closeSocket);
    }
  }, {
    key: "listen",
    value: function listen() {
      this.eventBus.emit(_events.EVENTS.OPEN_SOCKET);
      this.eventBus.emit(_events.EVENTS.MESSAGE_SOKET);
      this.eventBus.emit(_events.EVENTS.ERROR_SOCKET);
      this.eventBus.emit(_events.EVENTS.CLOSE_SOCKET);
    }
  }]);
  return DataWebSocket;
})();
exports["default"] = DataWebSocket;
